-- XGEN: Autogenerated File

library IEEE;
library UNISIM;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use UNISIM.VComponents.all;
use ieee.std_logic_unsigned.all;


package xgen_klm_scrod_bus is 

-------------------------------------------------------------------------
------- Start Psuedo Class TXSamplingSignals -------------------------



type TXSamplingSignals_s2m is record 
  clr : std_logic; 
  read_enable : std_logic; 
  ramp : std_logic; 
  read_column_select_s : std_logic_vector(5 downto 0); 
  read_row_select_s : std_logic_vector(2 downto 0); 
end record;


constant TXSamplingSignals_s2m_null : TXSamplingSignals_s2m:= (
  clr => '0',
  read_enable => '0',
  ramp => '0',
  read_column_select_s => (others => '0'),
  read_row_select_s => (others => '0')
);


type TXSamplingSignals_s2m_a is array (natural range <>) of TXSamplingSignals_s2m;




type TXSamplingSignals is record 
  clr : std_logic; 
  read_enable : std_logic; 
  ramp : std_logic; 
  read_column_select_s : std_logic_vector(5 downto 0); 
  read_row_select_s : std_logic_vector(2 downto 0); 
end record;


constant TXSamplingSignals_null : TXSamplingSignals:= (
  clr => '0',
  read_enable => '0',
  ramp => '0',
  read_column_select_s => (others => '0'),
  read_row_select_s => (others => '0')
);


type TXSamplingSignals_a is array (natural range <>) of TXSamplingSignals;

  procedure push_rev ( self : inout TXSamplingSignals; signal dataOut :  out TXSamplingSignals_s2m);
-- empty procedure removed. name: 'push'
-- empty procedure removed. name: 'pull_rev'
  procedure pull ( self : inout TXSamplingSignals; signal dataIn :  in TXSamplingSignals_s2m);
  procedure push_rev ( self : inout TXSamplingSignals;  signal clr :  out  std_logic; signal read_enable :  out  std_logic; signal ramp :  out  std_logic; signal read_column_select_s :  out  std_logic_vector(5 downto 0); signal read_row_select_s :  out  std_logic_vector(2 downto 0));
  procedure pull ( self : inout TXSamplingSignals;  signal clr :  in  std_logic; signal read_enable :  in  std_logic; signal ramp :  in  std_logic; signal read_column_select_s :  in  std_logic_vector(5 downto 0); signal read_row_select_s :  in  std_logic_vector(2 downto 0));
-- empty procedure removed. name: 'push'
-- empty procedure removed. name: 'pull_rev'
------- End Psuedo Class TXSamplingSignals -------------------------
-------------------------------------------------------------------------


-------------------------------------------------------------------------
------- Start Psuedo Class TXWriteSignals -------------------------



type TXWriteSignals_s2m is record 
  writeEnable_2 : std_logic_vector(4 downto 0); 
  writeEnable_1 : std_logic_vector(4 downto 0); 
  clear : std_logic; 
end record;


constant TXWriteSignals_s2m_null : TXWriteSignals_s2m:= (
  writeEnable_2 => (others => '0'),
  writeEnable_1 => (others => '0'),
  clear => '0'
);


type TXWriteSignals_s2m_a is array (natural range <>) of TXWriteSignals_s2m;




type TXWriteSignals is record 
  writeEnable_2 : std_logic_vector(4 downto 0); 
  writeEnable_1 : std_logic_vector(4 downto 0); 
  clear : std_logic; 
end record;


constant TXWriteSignals_null : TXWriteSignals:= (
  writeEnable_2 => (others => '0'),
  writeEnable_1 => (others => '0'),
  clear => '0'
);


type TXWriteSignals_a is array (natural range <>) of TXWriteSignals;

  procedure push_rev ( self : inout TXWriteSignals; signal dataOut :  out TXWriteSignals_s2m);
-- empty procedure removed. name: 'push'
-- empty procedure removed. name: 'pull_rev'
  procedure pull ( self : inout TXWriteSignals; signal dataIn :  in TXWriteSignals_s2m);
  procedure push_rev ( self : inout TXWriteSignals;  signal writeEnable_2 :  out  std_logic_vector(4 downto 0); signal writeEnable_1 :  out  std_logic_vector(4 downto 0); signal clear :  out  std_logic);
  procedure pull ( self : inout TXWriteSignals;  signal writeEnable_2 :  in  std_logic_vector(4 downto 0); signal writeEnable_1 :  in  std_logic_vector(4 downto 0); signal clear :  in  std_logic);
-- empty procedure removed. name: 'push'
-- empty procedure removed. name: 'pull_rev'
------- End Psuedo Class TXWriteSignals -------------------------
-------------------------------------------------------------------------


-------------------------------------------------------------------------
------- Start Psuedo Class TXShiftRegisterSignals -------------------------

type TXShiftRegisterSignals_m2s is record 
  data_out : std_logic_vector(15 downto 0); 
end record;


constant TXShiftRegisterSignals_m2s_null : TXShiftRegisterSignals_m2s:= (
  data_out => (others => '0')
);


type TXShiftRegisterSignals_m2s_a is array (natural range <>) of TXShiftRegisterSignals_m2s;




type TXShiftRegisterSignals_s2m is record 
  sr_Clock : std_logic_vector(4 downto 0); 
  SampleSelectAny : std_logic_vector(4 downto 0); 
  sr_select : std_logic; 
  SampleSelect : std_logic_vector(4 downto 0); 
  sr_clear : std_logic; 
end record;


constant TXShiftRegisterSignals_s2m_null : TXShiftRegisterSignals_s2m:= (
  sr_Clock => (others => '0'),
  SampleSelectAny => (others => '0'),
  sr_select => '0',
  SampleSelect => (others => '0'),
  sr_clear => '0'
);


type TXShiftRegisterSignals_s2m_a is array (natural range <>) of TXShiftRegisterSignals_s2m;




type TXShiftRegisterSignals is record 
  sr_Clock : std_logic_vector(4 downto 0); 
  data_out : std_logic_vector(15 downto 0); 
  SampleSelectAny : std_logic_vector(4 downto 0); 
  sr_select : std_logic; 
  SampleSelect : std_logic_vector(4 downto 0); 
  sr_clear : std_logic; 
end record;


constant TXShiftRegisterSignals_null : TXShiftRegisterSignals:= (
  sr_Clock => (others => '0'),
  data_out => (others => '0'),
  SampleSelectAny => (others => '0'),
  sr_select => '0',
  SampleSelect => (others => '0'),
  sr_clear => '0'
);


type TXShiftRegisterSignals_a is array (natural range <>) of TXShiftRegisterSignals;

  procedure push_rev ( self : inout TXShiftRegisterSignals; signal dataOut :  out TXShiftRegisterSignals_s2m);
  procedure pull ( self : inout TXShiftRegisterSignals; signal dataIn :  in TXShiftRegisterSignals_s2m);
  procedure push ( self : inout TXShiftRegisterSignals; signal dataOut :  out TXShiftRegisterSignals_m2s);
  procedure push_rev ( self : inout TXShiftRegisterSignals;  signal sr_Clock :  out  std_logic_vector(4 downto 0); signal SampleSelectAny :  out  std_logic_vector(4 downto 0); signal sr_select :  out  std_logic; signal SampleSelect :  out  std_logic_vector(4 downto 0); signal sr_clear :  out  std_logic);
  procedure pull_rev ( self : inout TXShiftRegisterSignals;  signal data_out :  in  std_logic_vector(15 downto 0));
  procedure pull ( self : inout TXShiftRegisterSignals;  signal sr_Clock :  in  std_logic_vector(4 downto 0); signal SampleSelectAny :  in  std_logic_vector(4 downto 0); signal sr_select :  in  std_logic; signal SampleSelect :  in  std_logic_vector(4 downto 0); signal sr_clear :  in  std_logic);
  procedure push ( self : inout TXShiftRegisterSignals;  signal data_out :  out  std_logic_vector(15 downto 0));
  procedure pull_rev ( self : inout TXShiftRegisterSignals; signal dataIn :  in TXShiftRegisterSignals_m2s);
------- End Psuedo Class TXShiftRegisterSignals -------------------------
-------------------------------------------------------------------------


-------------------------------------------------------------------------
------- Start Psuedo Class DataBus -------------------------

type DataBus_m2s is record 
  ShiftRegister : TXShiftRegisterSignals_m2s; 
end record;


constant DataBus_m2s_null : DataBus_m2s:= (
  ShiftRegister => TXShiftRegisterSignals_m2s_null
);


type DataBus_m2s_a is array (natural range <>) of DataBus_m2s;




type DataBus_s2m is record 
  SamplingSignals : TXSamplingSignals_s2m; 
  WriteSignals : TXWriteSignals_s2m; 
  ShiftRegister : TXShiftRegisterSignals_s2m; 
end record;


constant DataBus_s2m_null : DataBus_s2m:= (
  SamplingSignals => TXSamplingSignals_s2m_null,
  WriteSignals => TXWriteSignals_s2m_null,
  ShiftRegister => TXShiftRegisterSignals_s2m_null
);


type DataBus_s2m_a is array (natural range <>) of DataBus_s2m;




type DataBus is record 
  SamplingSignals : TXSamplingSignals; 
  WriteSignals : TXWriteSignals; 
  ShiftRegister : TXShiftRegisterSignals; 
end record;


constant DataBus_null : DataBus:= (
  SamplingSignals => TXSamplingSignals_null,
  WriteSignals => TXWriteSignals_null,
  ShiftRegister => TXShiftRegisterSignals_null
);


type DataBus_a is array (natural range <>) of DataBus;

  procedure push ( self : inout DataBus; signal dataOut :  out DataBus_m2s);
  procedure pull_rev ( self : inout DataBus;  signal ShiftRegister :  in  TXShiftRegisterSignals_m2s);
  procedure pull ( self : inout DataBus; signal dataIn :  in DataBus_s2m);
  procedure push_rev ( self : inout DataBus;  signal SamplingSignals :  out  TXSamplingSignals_s2m; signal WriteSignals :  out  TXWriteSignals_s2m; signal ShiftRegister :  out  TXShiftRegisterSignals_s2m);
  procedure pull ( self : inout DataBus;  signal SamplingSignals :  in  TXSamplingSignals_s2m; signal WriteSignals :  in  TXWriteSignals_s2m; signal ShiftRegister :  in  TXShiftRegisterSignals_s2m);
  procedure push ( self : inout DataBus;  signal ShiftRegister :  out  TXShiftRegisterSignals_m2s);
  procedure pull_rev ( self : inout DataBus; signal dataIn :  in DataBus_m2s);
  procedure push_rev ( self : inout DataBus; signal dataOut :  out DataBus_s2m);
------- End Psuedo Class DataBus -------------------------
-------------------------------------------------------------------------


-------------------------------------------------------------------------
------- Start Psuedo Class TX_DAC_control -------------------------

type TX_DAC_control_m2s is record 
  SCLK : std_logic; 
  REG_CLR : std_logic; 
  SIN : std_logic; 
  PCLK : std_logic; 
end record;


constant TX_DAC_control_m2s_null : TX_DAC_control_m2s:= (
  SCLK => '0',
  REG_CLR => '0',
  SIN => '0',
  PCLK => '0'
);


type TX_DAC_control_m2s_a is array (natural range <>) of TX_DAC_control_m2s;






type TX_DAC_control is record 
  SCLK : std_logic; 
  REG_CLR : std_logic; 
  SIN : std_logic; 
  PCLK : std_logic; 
end record;


constant TX_DAC_control_null : TX_DAC_control:= (
  SCLK => '0',
  REG_CLR => '0',
  SIN => '0',
  PCLK => '0'
);


type TX_DAC_control_a is array (natural range <>) of TX_DAC_control;

-- empty procedure removed. name: 'push_rev'
  procedure push ( self : inout TX_DAC_control; signal dataOut :  out TX_DAC_control_m2s);
  procedure pull_rev ( self : inout TX_DAC_control;  signal SCLK :  in  std_logic; signal REG_CLR :  in  std_logic; signal SIN :  in  std_logic; signal PCLK :  in  std_logic);
-- empty procedure removed. name: 'pull'
-- empty procedure removed. name: 'push_rev'
-- empty procedure removed. name: 'pull'
  procedure push ( self : inout TX_DAC_control;  signal SCLK :  out  std_logic; signal REG_CLR :  out  std_logic; signal SIN :  out  std_logic; signal PCLK :  out  std_logic);
  procedure pull_rev ( self : inout TX_DAC_control; signal dataIn :  in TX_DAC_control_m2s);
------- End Psuedo Class TX_DAC_control -------------------------
-------------------------------------------------------------------------


end xgen_klm_scrod_bus;


package body xgen_klm_scrod_bus is

-------------------------------------------------------------------------
------- Start Psuedo Class TXSamplingSignals -------------------------
procedure push_rev (  self : inout TXSamplingSignals; signal dataOut :  out TXSamplingSignals_s2m) is
   
  begin 
 
    
-- Start Connecting
    
  dataOut.clr <=  self.clr;
  dataOut.read_enable <=  self.read_enable;
  dataOut.ramp <=  self.ramp;
  dataOut.read_column_select_s <=  self.read_column_select_s;
  dataOut.read_row_select_s <=  self.read_row_select_s;

-- End Connecting
    
             
end procedure;

-- empty procedure removed. name: 'push'
-- empty procedure removed. name: 'pull_rev'
procedure pull (  self : inout TXSamplingSignals; signal dataIn :  in TXSamplingSignals_s2m) is
   
  begin 
 
    
-- Start Connecting
    
  self.clr := dataIn.clr;
  self.read_enable := dataIn.read_enable;
  self.ramp := dataIn.ramp;
  self.read_column_select_s := dataIn.read_column_select_s;
  self.read_row_select_s := dataIn.read_row_select_s;

-- End Connecting
    
             
end procedure;

procedure push_rev (  self : inout TXSamplingSignals;  signal clr :  out  std_logic; signal read_enable :  out  std_logic; signal ramp :  out  std_logic; signal read_column_select_s :  out  std_logic_vector(5 downto 0); signal read_row_select_s :  out  std_logic_vector(2 downto 0)) is
   
  begin 
 
    
-- Start Connecting
    
  clr <=  self.clr;
  read_enable <=  self.read_enable;
  ramp <=  self.ramp;
  read_column_select_s <=  self.read_column_select_s;
  read_row_select_s <=  self.read_row_select_s;

-- End Connecting
    
             
end procedure;

procedure pull (  self : inout TXSamplingSignals;  signal clr :  in  std_logic; signal read_enable :  in  std_logic; signal ramp :  in  std_logic; signal read_column_select_s :  in  std_logic_vector(5 downto 0); signal read_row_select_s :  in  std_logic_vector(2 downto 0)) is
   
  begin 
 
    
-- Start Connecting
    
  self.clr := clr;
  self.read_enable := read_enable;
  self.ramp := ramp;
  self.read_column_select_s := read_column_select_s;
  self.read_row_select_s := read_row_select_s;

-- End Connecting
    
             
end procedure;

-- empty procedure removed. name: 'push'
-- empty procedure removed. name: 'pull_rev'
------- End Psuedo Class TXSamplingSignals -------------------------
  -------------------------------------------------------------------------


-------------------------------------------------------------------------
------- Start Psuedo Class TXWriteSignals -------------------------
procedure push_rev (  self : inout TXWriteSignals; signal dataOut :  out TXWriteSignals_s2m) is
   
  begin 
 
    
-- Start Connecting
    
  dataOut.writeEnable_2 <=  self.writeEnable_2;
  dataOut.writeEnable_1 <=  self.writeEnable_1;
  dataOut.clear <=  self.clear;

-- End Connecting
    
             
end procedure;

-- empty procedure removed. name: 'push'
-- empty procedure removed. name: 'pull_rev'
procedure pull (  self : inout TXWriteSignals; signal dataIn :  in TXWriteSignals_s2m) is
   
  begin 
 
    
-- Start Connecting
    
  self.writeEnable_2 := dataIn.writeEnable_2;
  self.writeEnable_1 := dataIn.writeEnable_1;
  self.clear := dataIn.clear;

-- End Connecting
    
             
end procedure;

procedure push_rev (  self : inout TXWriteSignals;  signal writeEnable_2 :  out  std_logic_vector(4 downto 0); signal writeEnable_1 :  out  std_logic_vector(4 downto 0); signal clear :  out  std_logic) is
   
  begin 
 
    
-- Start Connecting
    
  writeEnable_2 <=  self.writeEnable_2;
  writeEnable_1 <=  self.writeEnable_1;
  clear <=  self.clear;

-- End Connecting
    
             
end procedure;

procedure pull (  self : inout TXWriteSignals;  signal writeEnable_2 :  in  std_logic_vector(4 downto 0); signal writeEnable_1 :  in  std_logic_vector(4 downto 0); signal clear :  in  std_logic) is
   
  begin 
 
    
-- Start Connecting
    
  self.writeEnable_2 := writeEnable_2;
  self.writeEnable_1 := writeEnable_1;
  self.clear := clear;

-- End Connecting
    
             
end procedure;

-- empty procedure removed. name: 'push'
-- empty procedure removed. name: 'pull_rev'
------- End Psuedo Class TXWriteSignals -------------------------
  -------------------------------------------------------------------------


-------------------------------------------------------------------------
------- Start Psuedo Class TXShiftRegisterSignals -------------------------
procedure push_rev (  self : inout TXShiftRegisterSignals; signal dataOut :  out TXShiftRegisterSignals_s2m) is
   
  begin 
 
    
-- Start Connecting
    
  dataOut.sr_Clock <=  self.sr_Clock;
  dataOut.SampleSelectAny <=  self.SampleSelectAny;
  dataOut.sr_select <=  self.sr_select;
  dataOut.SampleSelect <=  self.SampleSelect;
  dataOut.sr_clear <=  self.sr_clear;

-- End Connecting
    
             
end procedure;

procedure pull (  self : inout TXShiftRegisterSignals; signal dataIn :  in TXShiftRegisterSignals_s2m) is
   
  begin 
 
    
-- Start Connecting
    
  self.sr_Clock := dataIn.sr_Clock;
  self.SampleSelectAny := dataIn.SampleSelectAny;
  self.sr_select := dataIn.sr_select;
  self.SampleSelect := dataIn.SampleSelect;
  self.sr_clear := dataIn.sr_clear;

-- End Connecting
    
             
end procedure;

procedure push (  self : inout TXShiftRegisterSignals; signal dataOut :  out TXShiftRegisterSignals_m2s) is
   
  begin 
 
    
-- Start Connecting
    
  dataOut.data_out <=  self.data_out;

-- End Connecting
    
             
end procedure;

procedure push_rev (  self : inout TXShiftRegisterSignals;  signal sr_Clock :  out  std_logic_vector(4 downto 0); signal SampleSelectAny :  out  std_logic_vector(4 downto 0); signal sr_select :  out  std_logic; signal SampleSelect :  out  std_logic_vector(4 downto 0); signal sr_clear :  out  std_logic) is
   
  begin 
 
    
-- Start Connecting
    
  sr_Clock <=  self.sr_Clock;
  SampleSelectAny <=  self.SampleSelectAny;
  sr_select <=  self.sr_select;
  SampleSelect <=  self.SampleSelect;
  sr_clear <=  self.sr_clear;

-- End Connecting
    
             
end procedure;

procedure pull_rev (  self : inout TXShiftRegisterSignals;  signal data_out :  in  std_logic_vector(15 downto 0)) is
   
  begin 
 
    
-- Start Connecting
    
  self.data_out := data_out;

-- End Connecting
    
             
end procedure;

procedure pull (  self : inout TXShiftRegisterSignals;  signal sr_Clock :  in  std_logic_vector(4 downto 0); signal SampleSelectAny :  in  std_logic_vector(4 downto 0); signal sr_select :  in  std_logic; signal SampleSelect :  in  std_logic_vector(4 downto 0); signal sr_clear :  in  std_logic) is
   
  begin 
 
    
-- Start Connecting
    
  self.sr_Clock := sr_Clock;
  self.SampleSelectAny := SampleSelectAny;
  self.sr_select := sr_select;
  self.SampleSelect := SampleSelect;
  self.sr_clear := sr_clear;

-- End Connecting
    
             
end procedure;

procedure push (  self : inout TXShiftRegisterSignals;  signal data_out :  out  std_logic_vector(15 downto 0)) is
   
  begin 
 
    
-- Start Connecting
    
  data_out <=  self.data_out;

-- End Connecting
    
             
end procedure;

procedure pull_rev (  self : inout TXShiftRegisterSignals; signal dataIn :  in TXShiftRegisterSignals_m2s) is
   
  begin 
 
    
-- Start Connecting
    
  self.data_out := dataIn.data_out;

-- End Connecting
    
             
end procedure;

------- End Psuedo Class TXShiftRegisterSignals -------------------------
  -------------------------------------------------------------------------


-------------------------------------------------------------------------
------- Start Psuedo Class DataBus -------------------------
procedure push (  self : inout DataBus; signal dataOut :  out DataBus_m2s) is
   
  begin 
 
    
-- Start Connecting
    
  push( self.ShiftRegister, dataOut.ShiftRegister);

-- End Connecting
    
             
end procedure;

procedure pull_rev (  self : inout DataBus;  signal ShiftRegister :  in  TXShiftRegisterSignals_m2s) is
   
  begin 
 
    
-- Start Connecting
    
  pull_rev( self.ShiftRegister, ShiftRegister);

-- End Connecting
    
             
end procedure;

procedure pull (  self : inout DataBus; signal dataIn :  in DataBus_s2m) is
   
  begin 
 
    
-- Start Connecting
    
  pull( self.SamplingSignals, dataIn.SamplingSignals);
  pull( self.WriteSignals, dataIn.WriteSignals);
  pull( self.ShiftRegister, dataIn.ShiftRegister);

-- End Connecting
    
             
end procedure;

procedure push_rev (  self : inout DataBus;  signal SamplingSignals :  out  TXSamplingSignals_s2m; signal WriteSignals :  out  TXWriteSignals_s2m; signal ShiftRegister :  out  TXShiftRegisterSignals_s2m) is
   
  begin 
 
    
-- Start Connecting
    
  push_rev( self.SamplingSignals, SamplingSignals);
  push_rev( self.WriteSignals, WriteSignals);
  push_rev( self.ShiftRegister, ShiftRegister);

-- End Connecting
    
             
end procedure;

procedure pull (  self : inout DataBus;  signal SamplingSignals :  in  TXSamplingSignals_s2m; signal WriteSignals :  in  TXWriteSignals_s2m; signal ShiftRegister :  in  TXShiftRegisterSignals_s2m) is
   
  begin 
 
    
-- Start Connecting
    
  pull( self.SamplingSignals, SamplingSignals);
  pull( self.WriteSignals, WriteSignals);
  pull( self.ShiftRegister, ShiftRegister);

-- End Connecting
    
             
end procedure;

procedure push (  self : inout DataBus;  signal ShiftRegister :  out  TXShiftRegisterSignals_m2s) is
   
  begin 
 
    
-- Start Connecting
    
  push( self.ShiftRegister, ShiftRegister);

-- End Connecting
    
             
end procedure;

procedure pull_rev (  self : inout DataBus; signal dataIn :  in DataBus_m2s) is
   
  begin 
 
    
-- Start Connecting
    
  pull_rev( self.ShiftRegister, dataIn.ShiftRegister);

-- End Connecting
    
             
end procedure;

procedure push_rev (  self : inout DataBus; signal dataOut :  out DataBus_s2m) is
   
  begin 
 
    
-- Start Connecting
    
  push_rev( self.SamplingSignals, dataOut.SamplingSignals);
  push_rev( self.WriteSignals, dataOut.WriteSignals);
  push_rev( self.ShiftRegister, dataOut.ShiftRegister);

-- End Connecting
    
             
end procedure;

------- End Psuedo Class DataBus -------------------------
  -------------------------------------------------------------------------


-------------------------------------------------------------------------
------- Start Psuedo Class TX_DAC_control -------------------------
-- empty procedure removed. name: 'push_rev'
procedure push (  self : inout TX_DAC_control; signal dataOut :  out TX_DAC_control_m2s) is
   
  begin 
 
    
-- Start Connecting
    
  dataOut.SCLK <=  self.SCLK;
  dataOut.REG_CLR <=  self.REG_CLR;
  dataOut.SIN <=  self.SIN;
  dataOut.PCLK <=  self.PCLK;

-- End Connecting
    
             
end procedure;

procedure pull_rev (  self : inout TX_DAC_control;  signal SCLK :  in  std_logic; signal REG_CLR :  in  std_logic; signal SIN :  in  std_logic; signal PCLK :  in  std_logic) is
   
  begin 
 
    
-- Start Connecting
    
  self.SCLK := SCLK;
  self.REG_CLR := REG_CLR;
  self.SIN := SIN;
  self.PCLK := PCLK;

-- End Connecting
    
             
end procedure;

-- empty procedure removed. name: 'pull'
-- empty procedure removed. name: 'push_rev'
-- empty procedure removed. name: 'pull'
procedure push (  self : inout TX_DAC_control;  signal SCLK :  out  std_logic; signal REG_CLR :  out  std_logic; signal SIN :  out  std_logic; signal PCLK :  out  std_logic) is
   
  begin 
 
    
-- Start Connecting
    
  SCLK <=  self.SCLK;
  REG_CLR <=  self.REG_CLR;
  SIN <=  self.SIN;
  PCLK <=  self.PCLK;

-- End Connecting
    
             
end procedure;

procedure pull_rev (  self : inout TX_DAC_control; signal dataIn :  in TX_DAC_control_m2s) is
   
  begin 
 
    
-- Start Connecting
    
  self.SCLK := dataIn.SCLK;
  self.REG_CLR := dataIn.REG_CLR;
  self.SIN := dataIn.SIN;
  self.PCLK := dataIn.PCLK;

-- End Connecting
    
             
end procedure;

------- End Psuedo Class TX_DAC_control -------------------------
  -------------------------------------------------------------------------


end xgen_klm_scrod_bus;